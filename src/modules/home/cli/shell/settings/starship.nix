{ pkgs, lib, config, ... }:

let
  hostInfo = "$shell$username$hostname($shlvl)($cmd_duration)";
  nixInfo = "($nix_shell)\${custom.nix_inspect}";
  localInfo =
    "$directory($git_branch$git_commit$git_state$git_status)($aws$gcloud$openstack)";
  prompt = "$jobs$character";
in {
  config.programs.starship =
    lib.mkIf (config.my.home.cli.shell.type == "fish") {
      enable = true;
      settings = {
        add_newline = false;
        fill.symbol = " ";
        format = ''
          ${hostInfo} $fill ${nixInfo}
          ${localInfo} $fill $time
          ${prompt}
        '';

        cmd_duration = { format = "took [$duration]($style) "; };

        git_branch = {
          symbol = "Û∞ä¢ ";
          format = "on [$symbol$branch]($style) ";
          truncation_length = 4;
          truncation_symbol = "‚Ä¶/";
        };

        git_status = {
          format = "[\\($all_status$ahead_behind\\)]($style) ";
          conflicted = "üè≥";
          up_to_date = "ÔÅÜ ";
          untracked = "Ôî© ";
          ahead = "‚á°\${count}";
          diverged = "‚áï‚á°\${ahead_count}‚á£\${behind_count}";
          behind = "‚á£\${count}";
          stashed = "Û∞èó ";
          modified = "ÔÅÑ ";
          staged = "[++\\($count\\)](green)";
          renamed = "Û∞ñ∑ ";
          deleted = "ÔÄî ";
        };

        hostname = {
          format = "[@$hostname]($style) ";
          style = "bold green";
          ssh_only = false;
        };

        shlvl = {
          format = "[$shlvl]($style) ";
          style = "bold cyan";
          threshold = 2;
          repeat = true;
          disabled = false;
        };

        nix_shell = {
          format = "[($name \\(develop\\) <- )$symbol]($style) ";
          style = "bold red";
          impure_msg = "";
          symbol = "Ôåì ";
        };

        custom = {
          nix_inspect = {
            when = "test -z $IN_NIX_SHELL";
            format = "[($output <- )$symbol]($style) ";
            style = "bold blue";
            symbol = "Ôåì ";
            command = lib.getExe (pkgs.writeShellApplication {
              name = "nix-inspect";
              runtimeInputs = with pkgs; [ perl gnugrep findutils ];
              text = builtins.readFile ./nix-inspect-path.sh;
            });
          };
        };

        character = {
          error_symbol = "[~~>](bold red)";
          success_symbol = "[->>](bold green)";
          vimcmd_symbol = "[<<-](bold yellow)";
          vimcmd_visual_symbol = "[<<-](bold cyan)";
          vimcmd_replace_symbol = "[<<-](bold purple)";
          vimcmd_replace_one_symbol = "[<<-](bold purple)";
        };

        time = {
          format = "\\[[$time]($style)\\]";
          disabled = false;
        };

        username = {
          format = "[$user]($style)";
          show_always = true;
        };

        directory = {
          truncation_length = 3;
          truncation_symbol = "‚Ä¶/";
          home_symbol = "Û∞ãû ";
          read_only_style = "197";
          read_only = " ÔÄ£ ";
          format = "at [$path]($style)[$read_only]($read_only_style) ";

          substitutions = {
            "Û∞ãû /Documents" = "Û∞àô ";
            "Û∞ãû /documents" = "Û∞àô ";

            "Û∞ãû /Downloads" = "ÔÄô ";
            "Û∞ãû /downloads" = "ÔÄô ";

            "Û∞ãû /media/music" = "ÔÄÅ ";
            "Û∞ãû /media/pictures" = "ÔÄæ ";
            "Û∞ãû /media/videos" = "ÔÄΩ ";
            "Û∞ãû /Music" = "ÔÄÅ ";
            "Û∞ãû /Pictures" = "ÔÄæ ";
            "Û∞ãû /Videos" = "ÔÄΩ ";

            "Û∞ãû /dev" = "Û±å¢ ";
            "Û∞ãû /Dev" = "Û±å¢ ";

            "Û∞ãû /skl" = "Û∞ë¥ ";
            "Û∞ãû /.config" = "Ôê£ ";
          };
        };

        os = {
          style = "bold white";
          format = "[$symbol]($style)";
          symbols = {
            Arch = "ÔåÉ";
            Artix = "ÔåÉ";
            Debian = "ÔåÜ";
            Kali = "Û∞†•";
            EndeavourOS = "Ôå¢";
            Fedora = "Ôåä";
            NixOS = "Ôåì";
            openSUSE = "Ôåî";
            SUSE = "Ôåî";
            Ubuntu = "Ôåú";
            Raspbian = "Ôåï";
            elementary = "Ôåâ";
            Coreos = "ÔåÖ";
            Gentoo = "Ôåç";
            mageia = "Ôåê";
            CentOS = "ÔåÑ";
            sabayon = "Ôåó";
            slackware = "Ôåò";
            Mint = "Ôåé";
            Alpine = "ÔåÄ";
            aosc = "ÔåÅ";
            devuan = "Ôåá";
            Manjaro = "Ôåí";
            rhel = "Ôåñ";
            Macos = "Û∞Äµ";
            Linux = "ÔÖº";
            Windows = "Óúè";
          };
        };

        # Cloud
        gcloud.format = "on [$symbol$active(/$project)(\\($region\\))]($style)";
        aws.format = "on [$symbol$profile(\\($region\\))]($style)";
        aws.symbol = "Ôâ∞ ";
        conda.symbol = "ÔÑå ";
        dart.symbol = "Óûò ";
        docker_context.symbol = "Ôåà ";
        elm.symbol = "Óò¨ ";
        elixir.symbol = "Óâµ ";
        gcloud.symbol = "Óû≤ ";
        golang.symbol = "Óòß ";
        hg_branch.symbol = "Ôêò ";
        java.symbol = "Óâñ ";
        julia.symbol = "Óò§ ";
        memory_usage.symbol = "Û∞çõ ";
        nim.symbol = "Û∞Ü• ";
        nodejs.symbol = "ÓûÅ  ";
        package.symbol = "Û∞èó ";
        perl.symbol = "Óù© ";
        php.symbol = "Óòà ";
        python.symbol = "ÓòÜ ";
        ruby.symbol = "Óàæ ";
        rust.symbol = "ÔÄì ";
        scala.symbol = "Óú∑ ";
        shlvl.symbol = "ÔÇ´ ";
        swift.symbol = "Û∞õ• ";
        terraform.symbol = "Û±Å¢ ";
        container.symbol = "Û∞èñ ";
        lua.symbol = "Û∞¢± ";
        c.symbol = "Óòû ";
      };
    };
}
