diff --git a/src/util/string.c b/src/util/string.c
index bfea1de..445a869 100644
--- a/src/util/string.c
+++ b/src/util/string.c
@@ -55,6 +55,12 @@ int mime_type_is_text(const char *mime_type) {
     return basic || common || special;
 }

+int mime_type_is_sensitive(const char *mime_type) {
+    /* A heuristic to detect sensitive mime types */
+
+    return str_has_suffix(mime_type, "secret");
+}
+
 int str_has_prefix(const char *string, const char *prefix) {
     size_t prefix_length = strlen(prefix);
     return strncmp(string, prefix, prefix_length) == 0;
diff --git a/src/util/string.h b/src/util/string.h
index 1477944..08307d1 100644
--- a/src/util/string.h
+++ b/src/util/string.h
@@ -25,6 +25,7 @@
 typedef char * const *argv_t;

 int mime_type_is_text(const char *mime_type);
+int mime_type_is_sensitive(const char *mime_type);

 int str_has_prefix(const char *string, const char *prefix);
 int str_has_suffix(const char *string, const char *suffix);
diff --git a/src/wl-paste.c b/src/wl-paste.c
index dee2fad..bd68567 100644
--- a/src/wl-paste.c
+++ b/src/wl-paste.c
@@ -53,6 +53,7 @@ struct types {
     int inferred_available;
     int plain_text_utf8_available;
     int plain_text_available;
+    int sensitive;
     const char *having_explicit_as_prefix;
     const char *any_text;
     const char *any;
@@ -99,6 +100,9 @@ static struct types classify_offer_types(struct offer *offer) {
         ) {
             types.having_explicit_as_prefix = mime_type;
         }
+        if (mime_type_is_sensitive(mime_type)) {
+            types.sensitive = 1;
+        }
     }
     return types;
 }
@@ -319,7 +323,7 @@ static void selection_callback(struct offer *offer, int primary) {
     wl_display_flush(wl_display);

     close(pipefd[1]);
-    rc = run_paste_command(pipefd[0], "data");
+    rc = run_paste_command(pipefd[0], types.sensitive == 1 ? "sensitive" : "data");
     if (!rc) {
         if (options.watch) {
             /* Try to cope without exiting completely */
